<?xml version="1.0" encoding="UTF-8"?>
<!--
/*
*Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
*
*WSO2 Inc. licenses this file to you under the Apache License,
*Version 2.0 (the "License"); you may not use this file except
*in compliance with the License.
*You may obtain a copy of the License at
*
*http://www.apache.org/licenses/LICENSE-2.0
*
*Unless required by applicable law or agreed to in writing,
*software distributed under the License is distributed on an
*"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*KIND, either express or implied.  See the License for the
*specific language governing permissions and limitations
*under the License.
*/-->
<definitions xmlns="http://ws.apache.org/ns/synapse">
    <sequence name="fault">
        <log level="full">
            <property name="MESSAGE" value="Executing default &#34;fault&#34; sequence"/>
            <property name="ERROR_CODE" expression="get-property('ERROR_CODE')"/>
            <property name="ERROR_MESSAGE" expression="get-property('ERROR_MESSAGE')"/>
        </log>
        <drop/>
    </sequence>
    <sequence name="main">
        <log/>
        <drop/>
    </sequence>
    <api name="Transform" context="/Transform">
        <resource methods="POST">
            <inSequence>
                <property name="messageType" value="application/json" scope="axis2"/>
                <log level="custom">
                    <property name="Status" expression="json-eval($.StockQuotes.Stock)"/>
                </log>
                <filter source="json-eval($.StockQuotes.Stock.Symbol)" regex="null">
                    <then>
                        <payloadFactory media-type="json">
                            <format>{ "StockQuotes": { "Stock": $1 } }</format>
                            <args>
                                <arg evaluator="json" expression="$.StockQuotes.Stock"/>
                            </args>
                        </payloadFactory>
                    </then>
                    <else>
                        <payloadFactory media-type="json">
                            <format>{ "StockQuotes": { "Stock": [ $1 ] } }</format>
                            <args>
                                <arg evaluator="json" expression="$.StockQuotes.Stock"/>
                            </args>
                        </payloadFactory>
                    </else>
                </filter>
                <respond/>
            </inSequence>
        </resource>
    </api>
</definitions>